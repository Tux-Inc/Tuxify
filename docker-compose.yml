# File Name: docker-compose.yml
# Author: Gwenaël Hubler, Stephane Fievez, Roman Lopes, Alexandre Kévin De Freitas Martins, Bouna Diallo
# Creation Date: 2023
# Description: Docker compose file for the Tuxify project
# Copyright (c) 2023 Tux Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

version: "3"

services:
  # PostgreSQL auth database
  api_auth_db:
    container_name: tuxify-api-auth-db
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - auth_data:/var/lib/postgresql/data
      - ./dabatase/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tuxify-network

  # PostgreSQL providers database
  api_providers_db:
    container_name: tuxify-api-providers-db
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${NESTSV_PROVIDERS_POSTGRES_PASSWORD}
      POSTGRES_USER: ${NESTSV_PROVIDERS_POSTGRES_USER}
      POSTGRES_DB: ${NESTSV_PROVIDERS_POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - providers_data:/var/lib/postgresql/data
      - ./dabatase/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tuxify-network

  # MongoDB Flows database
  api_flows_db:
    container_name: tuxify-api-flows-db
    image: mongo:latest
    restart: unless-stopped
    command: --quiet
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${NESTSV_FLOWS_MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${NESTSV_FLOWS_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${NESTSV_FLOWS_MONGO_DB}
    volumes:
      - flows_data:/data/db
      - ./database/init.js:/docker-entrypoint-initdb.d/init.js:ro
    ports:
      - "27017:27017"
    networks:
      - tuxify-network

  # Redis auth cache
  api_auth_cache:
    container_name: tuxify-api-auth-cache
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - tuxify-network

  # Nest microservices NATS transport server
  api_nats:
    container_name: tuxify-api-nats
    image: nats:latest
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    networks:
      - tuxify-network

  # Nest API services
  api_gateway:
    container_name: tuxify-api-gateway
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    ports:
      - "3000:3000"
      - "8000:8000"
    volumes:
      - ./backend/gateway:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - tuxify-network
    env_file:
      - .env

  # Mailer microservice
  api_mailer:
    container_name: tuxify-api-mailer
    build:
      context: ./backend/mailer
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    volumes:
      - ./backend/mailer:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - tuxify-network
    env_file:
      - .env

  # Auth microservice
  api_auth:
    container_name: tuxify-api-auth
    build:
      context: ./backend/auth
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    ports:
      - ${NESTSV_AUTH_PORT}:${NESTSV_AUTH_PORT}
    volumes:
      - ./backend/auth:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - api_auth_db
      - api_auth_cache
    networks:
      - tuxify-network
    env_file:
      - .env

  # Flows microservice
  api_flows:
    container_name: tuxify-api-flows
    build:
      context: ./backend/flows
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    volumes:
      - ./backend/flows:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - api_flows_db
    networks:
      - tuxify-network
    env_file:
      - .env

  # Providers microservice
  api_providers:
    container_name: tuxify-api-providers
    build:
      context: ./backend/providers
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    ports:
      - ${NESTSV_PROVIDERS_PORT}:${NESTSV_PROVIDERS_PORT}
    volumes:
      - ./backend/providers:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - api_providers_db
    networks:
      - tuxify-network
    env_file:
      - .env

  # Google provider
  api_google:
    container_name: tuxify-api-google
    build:
      context: ./backend/external-providers/google
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    ports:
      - ${NESTSV_GOOGLE_PORT}:${NESTSV_GOOGLE_PORT}
    volumes:
      - ./backend/external-providers/google:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - api_providers
    networks:
      - tuxify-network
    env_file:
      - .env

  # Github provider
  api_github:
    container_name: tuxify-api-github
    build:
      context: ./backend/external-providers/github
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    ports:
      - ${NESTSV_GITHUB_PORT}:${NESTSV_GITHUB_PORT}
    volumes:
      - ./backend/external-providers/github:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - api_providers
    networks:
      - tuxify-network
    env_file:
      - .env

  # Microsoft provider
  api_microsoft:
    container_name: tuxify-api-microsoft
    build:
      context: ./backend/external-providers/microsoft
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    command: npm run start:dev --watch-preserve-output
    working_dir: /usr/src/app
    ports:
      - ${NESTSV_MICROSOFT_PORT}:${NESTSV_MICROSOFT_PORT}
    volumes:
      - ./backend/external-providers/microsoft:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - api_providers
    networks:
      - tuxify-network
    env_file:
      - .env

  # Nuxt Frontend
  frontend:
    container_name: tuxify-frontend
    image: node:latest
    restart: unless-stopped
    command: yarn dev
    working_dir: /usr/src/app
    ports:
      - "8080:8080"
      - "24678:24678"
    volumes:
      - ./frontend:/usr/src/app
      - ./frontend/node_modules:/usr/src/app/node_modules
    depends_on:
      - api_gateway
    networks:
      - tuxify-network
    env_file:
      - .env

networks:
  tuxify-network:
    driver: bridge

volumes:
  auth_data:
  flows_data:
  providers_data:
